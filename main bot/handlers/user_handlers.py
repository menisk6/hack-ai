import asyncio
import re

from aiogram.utils.keyboard import InlineKeyboardBuilder

from BotHelper import HelpGPT, llm
from VecSearch import model
from database import db_users
from aiogram import F, Router, exceptions, types, filters, Dispatcher
from aiogram.enums import ContentType, ChatType, ParseMode
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.types import (CallbackQuery, Message, ReplyKeyboardMarkup, KeyboardButton, Chat, InlineKeyboardMarkup,
                           InlineKeyboardButton)
import pandas as pd
import datetime
from aiogram import Bot

router = Router()

pd.set_option("display.max_rows", None)
pd.set_option("display.max_columns", None)
pd.set_option('display.expand_frame_repr', False)
pd.set_option('display.max_colwidth', None)

# oper_agent = HelpGPT.from_llm(llm, verbose=False)
# oper_agent.seed_agent()

class FSMFillForm(StatesGroup):
    '''–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π'''
    get_auth = State()        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    ai_talk = State()         # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—â–µ–Ω–∏—è —Å ai
    tp_talk = State()         # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—â–µ–Ω–∏—è —Å —Ç–µ—Ö–ø–æ–¥–æ–º


#–†–æ—É—Ç–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–º–∞–Ω–¥—ã /start. –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Ç–æ—è–Ω–∏–µ –æ–±—â–µ–Ω–∏—è —Å –ò–ò
@router.message(CommandStart())
async def process_start_command(message: Message, state: FSMContext):
    global oper_agent
    oper_agent = HelpGPT.from_llm(llm, verbose=False)
    oper_agent.seed_agent()
    # ai_message = oper_agent.ai_step()
    await message.reply(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –±–æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ö–∞–∫–æ–π —É –í–∞—Å –≤–æ–ø—Ä–æ—Å?')
    # await message.reply(ai_message)
    await state.set_state(FSMFillForm.ai_talk)


#–†–æ—É—Ç–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–º–∞–Ω–¥—ã /cancel. –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
@router.message(Command(commands='cancel'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(
        text='–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start',
    reply_markup=types.ReplyKeyboardRemove())
    await state.clear()


#–†–æ—É—Ç–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–º–∞–Ω–¥—ã /help. –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
@router.message(Command(commands='help'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(
        text='–≠—Ç–æ –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start',
    reply_markup=types.ReplyKeyboardRemove())
    await state.clear()


#–†–æ—É—Ç–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–æ–ø–∫–∏ –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥. –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Ç–æ—è–Ω–∏–µ ai_talk
@router.message(F.text == "–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def func_email(message: Message, state: FSMContext):
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ.")
    await state.set_state(FSMFillForm.ai_talk)



#–†–æ—É—Ç–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–æ–ø–∫–∏ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø–µ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ò–ò. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
#–ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ª–∏–±–æ –≤ —Å–æ—Å–æ—Ç—è–Ω–∏–µ tp_talk, –ª–∏–±–æ get_auth
@router.message(F.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø–µ", StateFilter(FSMFillForm.ai_talk))
async def func_email(message: Message, state: FSMContext,  bot: Bot):
    check_db = await db_users.fetch(f'SELECT tg_id FROM public.users')
    df = pd.DataFrame(check_db)
    if not df.empty and df[0].str.contains(str(message.from_user.id)).any():
        user = message.from_user.id
        group = -1002394147014
        sql = await db_users.fetch(f"SELECT * FROM public.questions WHERE tg_id = $1 AND datetime::date = $2 ORDER BY datetime DESC LIMIT 5", str(user), datetime.date.today())
        df = pd.DataFrame(sql)
        df_str = df.to_string()
        await bot.send_message(chat_id=group, text=f"{df[1][0]}\n<pre>{df_str}</pre>", parse_mode='html', )
        kb_builder = InlineKeyboardBuilder()
        kb_builder.row(
            InlineKeyboardButton(
                text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π',
                callback_data='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π'
            )
        )
        await bot.send_message(chat_id=group, text=f"{df[0][0]}\n{df[1][0]}", parse_mode='html', reply_markup=kb_builder.as_markup())
        await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        await state.set_state(FSMFillForm.tp_talk)
    else:
        keyboard = [
            [KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]
        ]
        await message.answer(
            text='–î–ª—è –æ–±—à–µ–Ω–∏—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79XXXXXXXXX,'
                 ' –ª–∏–±–æ email, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', reply_markup=ReplyKeyboardMarkup(keyboard=keyboard,
                                                                                            resize_keyboard=True,
                                                                                            input_field_placeholder='–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º',
                                                                                            one_time_keyboard=True))
        await state.set_state(FSMFillForm.get_auth)


#–†–æ—É—Ç–µ—Ä –¥–ª—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏—è –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ò–ò
@router.message(F.text, StateFilter(FSMFillForm.ai_talk))
async def func_email(message: Message, state: FSMContext):
    human_message = message.text
    if human_message:
        oper_agent.human_step(human_message)
        faq_embeddings = model.encode(human_message)
        vector_str = f"[{', '.join(map(str, faq_embeddings))}]"
        query = f"""
            SELECT "–í–æ–ø—Ä–æ—Å", "–û—Ç–≤–µ—Ç", "–í–µ–∫—Ç–æ—Ä" <=> $1 AS distance
            FROM knowledge
            ORDER BY "–í–µ–∫—Ç–æ—Ä" <=> $1
            LIMIT $2;
            """
        topics = await db_users.fetch(query, vector_str, 2)
        ai_message = oper_agent.ai_step(topics)
    # oper_agent.analyse_stage()
    # ai_message = f'–û–¢–í–ï–¢ –ò–ò - {message.text}'
    await db_users.execute(
        'INSERT INTO public.questions (tg_id, quest, mess_id, datetime, answer, adress) VALUES ($1, $2, $3, $4, $5, $6)',
        str(message.from_user.id), message.text, str(message.message_id), datetime.datetime.now().strftime('%d/%m/%Y, %H:%M:%S'), ai_message, 'AI')
    keyboard1 = [[KeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø–µ")], [KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥")]]
    await message.reply(text = f'{ai_message}', reply_markup=ReplyKeyboardMarkup(keyboard=keyboard1,
    resize_keyboard=True,
    input_field_placeholder='–õ–∏–±–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å',
    one_time_keyboard=True))


# –†–æ—É—Ç–µ—Ä –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
@router.message(F.content_type == ContentType.CONTACT, StateFilter(FSMFillForm.get_auth))
async def func_contact(message: Message, state: FSMContext,  bot: Bot):
    user = message.from_user.id
    group = -1002394147014
    await db_users.execute('INSERT INTO public.users (tg_id, name, phone, email, tg_name, lastname) VALUES ($1, $2, $3,$4,$5,$6)',
                           str(message.from_user.id), message.contact.first_name, message.contact.phone_number, None, message.from_user.username, message.contact.last_name)
    await message.reply(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞')
    sql = await db_users.fetch(
        f"SELECT * FROM public.questions WHERE tg_id = $1 AND datetime::date = $2 ORDER BY datetime DESC LIMIT 5",
        str(user), datetime.date.today())
    df = pd.DataFrame(sql)
    df_str = df.to_string()
    kb_builder = InlineKeyboardBuilder()
    kb_builder.row(
        InlineKeyboardButton(
            text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π',
            callback_data='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π'
        )
    )
    await bot.send_message(chat_id=group, text=f"{df[0][0]}\n{df[1][0]}", parse_mode='html',
                           reply_markup=kb_builder.as_markup())
    await state.set_state(FSMFillForm.tp_talk)


#–†–æ—É—Ç–µ—Ä –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –ª—é–±–æ–π —Ç–µ–∫—Å—Ç. –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
@router.message(F.text, StateFilter(FSMFillForm.get_auth))
async def func_email(message: Message, state: FSMContext,  bot: Bot):
    user = message.from_user.id
    group = -1002394147014
    if re.match(r'(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+[.][a-zA-Z0-9-.]+$)', message.text) is not None:
        await db_users.execute(
            'INSERT INTO public.users (tg_id, email, tg_name) VALUES ($1, $2, $3)',
            str(message.from_user.id),   message.text, message.from_user.username)
        await message.reply(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞')
        sql = await db_users.fetch(
            f"SELECT * FROM public.questions WHERE tg_id = $1 AND datetime::date = $2 ORDER BY datetime DESC LIMIT 5",
            str(user), datetime.date.today())
        df = pd.DataFrame(sql)
        df_str = df.to_string()
        kb_builder = InlineKeyboardBuilder()
        kb_builder.row(
            InlineKeyboardButton(
                text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π',
                callback_data='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π'
            )
        )
        await bot.send_message(chat_id=group, text=f"{df[0][0]}\n{df[1][0]}", parse_mode='html',
                               reply_markup=kb_builder.as_markup())
        await state.set_state(FSMFillForm.tp_talk)
    elif re.match(r'([+]79\d{9})', message.text) is not None:
        await db_users.execute(
            'INSERT INTO public.users (tg_id, phone, tg_name) VALUES ($1, $2, $3)',
            str(message.from_user.id), message.text, message.from_user.username)
        await message.reply(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞')
        sql = await db_users.fetch(
            f"SELECT * FROM public.questions WHERE tg_id = $1 AND datetime::date = $2 ORDER BY datetime DESC LIMIT 5",
            str(user), datetime.date.today())
        df = pd.DataFrame(sql)
        df_str = df.to_string()
        kb_builder = InlineKeyboardBuilder()
        kb_builder.row(
            InlineKeyboardButton(
                text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π',
                callback_data='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π'
            )
        )
        await bot.send_message(chat_id=group, text=f"{df[0][0]}\n{df[1][0]}", parse_mode='html',
                               reply_markup=kb_builder.as_markup())
        await state.set_state(FSMFillForm.tp_talk)
    else:
        await message.reply(f'–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–æ—á—Ç—É –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')


#–†–æ—É—Ç–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É —Ç–µ—Ö–ø–æ–¥–æ–≤
@router.message(F.text, StateFilter(FSMFillForm.tp_talk))
async def func_email(message: Message, state: FSMContext,  bot: Bot):
    user = message.from_user.id
    group = -1002394147014
    await db_users.execute(
        'INSERT INTO public.questions (tg_id, quest, mess_id, datetime, adress) VALUES ($1, $2, $3, $4, $5)',
        str(message.from_user.id), message.text, str(message.message_id), datetime.datetime.now().strftime('%d/%m/%Y, %H:%M:%S'), 'TP')
    sql = await db_users.fetch(
        f"SELECT * FROM public.questions WHERE tg_id = $1 AND datetime::date = $2 ORDER BY datetime DESC LIMIT 5",
        str(user), datetime.date.today())
    df = pd.DataFrame(sql)
    df_str = df.to_string()
    kb_builder = InlineKeyboardBuilder()
    kb_builder.row(
        InlineKeyboardButton(
            text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π',
            callback_data='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π'
        )
    )
    await bot.send_message(chat_id=group, text=f"{df[0][0]}\n{df[1][0]}", parse_mode='html',
                           reply_markup=kb_builder.as_markup())


@router.callback_query(F.data == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π')
async def user_info(callback_query: CallbackQuery):
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_mes')],
                                                            [InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥', callback_data='next_mes')]])
    user_id = callback_query.message.text.split('\n')[0]
    sql = await db_users.fetch(f"SELECT * FROM public.questions WHERE tg_id = $1 ORDER BY datetime DESC",str(user_id))
    df = pd.DataFrame(sql, columns=['tg_id','–í–æ–ø—Ä–æ—Å','mes_id','–î–∞—Ç–∞','–û—Ç–≤–µ—Ç –ò–ò','–û—Ç–≤–µ—Ç –¢–ü', '–∞–¥—Ä–µ—Å'])
    df_str = df['–í–æ–ø—Ä–æ—Å'].iloc[0][:3000]
    print(len(df_str))
    await callback_query.message.answer(text=f"{user_id}\n0\n<pre>{df_str}</pre>", parse_mode='html', reply_markup=inline_keyboard)


@router.callback_query(F.data == 'next_mes')
async def user_info(callback_query: CallbackQuery):
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_mes')],
                                                            [InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥', callback_data='next_mes')]])
    text = callback_query.message.text.split('\n')
    user_id = text[0]
    call_number = int(text[1])
    sql = await db_users.fetch(f"SELECT * FROM public.questions WHERE tg_id = $1 ORDER BY datetime DESC",str(user_id))
    df = pd.DataFrame(sql, columns=['tg_id','–í–æ–ø—Ä–æ—Å','mes_id','–î–∞—Ç–∞','–û—Ç–≤–µ—Ç –ò–ò','–û—Ç–≤–µ—Ç –¢–ü', '–∞–¥—Ä–µ—Å'])
    df_str = df['–í–æ–ø—Ä–æ—Å'].iloc[call_number+1][:3000]
    await callback_query.message.edit_text(text=f"{user_id}\n{call_number+1}\n<pre>{df_str}</pre>", parse_mode='html', reply_markup=inline_keyboard)


@router.callback_query(F.data == 'back_mes')
async def user_info(callback_query: CallbackQuery):
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_mes')],
                                                            [InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥', callback_data='next_mes')]])
    text = callback_query.message.text.split('\n')
    user_id = text[0]
    call_number = int(text[1])
    sql = await db_users.fetch(f"SELECT * FROM public.questions WHERE tg_id = $1 ORDER BY datetime DESC",str(user_id))
    df = pd.DataFrame(sql, columns=['tg_id','–í–æ–ø—Ä–æ—Å','mes_id','–î–∞—Ç–∞','–û—Ç–≤–µ—Ç –ò–ò','–û—Ç–≤–µ—Ç –¢–ü', '–∞–¥—Ä–µ—Å'])
    df_str = df['–í–æ–ø—Ä–æ—Å'].iloc[call_number-1][:3000]
    await callback_query.message.edit_text(text=f"{user_id}\n{call_number-1}\n<pre>{df_str}</pre>", parse_mode='html', reply_markup=inline_keyboard)


#–†–æ—É—Ç–µ—Ä –Ω–∞–ª–∏—á–∏—è —Ä–µ–ø–ª–∞–µ–≤ –≤ –≥—Ä—É–ø–ø–µ —Ç–µ—Ö–ø–æ–¥–æ–≤
@router.message(lambda a: a.chat.id == -1002394147014)
async def handle_group_message(message: types.Message):
    if message.chat.type in ["group", "supergroup"]:
        user_id = re.search(r'\d{9}',message.reply_to_message.text).group()
        keyboard2 = [[KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥")]]
        print(message.text)
        print(message.reply_to_message.text)
        await db_users.execute('UPDATE public.questions SET answer_tp = $1, adress = $2 WHERE tg_id = $3 AND quest = $4',
                               message.text, 'TP', user_id, message.reply_to_message.text.split('\n')[1])
        await message.bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}", reply_markup=ReplyKeyboardMarkup(keyboard=keyboard2,
    resize_keyboard=True,
    one_time_keyboard=True))


#–†–æ—É—Ç–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
@router.message(F.text, StateFilter(default_state))
async def none_default_state(message: Message, state: FSMContext):
    await message.answer(
        text='–ú–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å. –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start',
    reply_markup=types.ReplyKeyboardRemove())
    await state.clear()